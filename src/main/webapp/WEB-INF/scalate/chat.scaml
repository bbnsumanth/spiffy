%html
	%head 
		%title Listen
		%script{:type=>"text/javascript",:src=>"http://www.google.com/jsapi"}
		:javascript
			google.load("jquery", "1.5.2");

			// ============= CometSession implementation
			//			
			// constructor
			function CometSession() {
				// handshake timeout
				this.timeout = 10000
				// url to connect to
				this.url = "";
				// ready state: initial, opening, open, closing, closed
				this.readyState = CometSession.READYSTATE_INITIAL;
				// session key used to identify client
				this.sessionKey = "";
				// microseconds to wait before reestablishing connection
				this.reconnTime = 5000;
				this.currReconnTime = this.reconnTime;
				// reconnTime will increase with the number of failed attempts
				// until it reaches this value
				this.maxReconnTime = 5 * 60 * 1000;
				// starting packet id, gets incremented
				this.packetId = 1;

				// Callbacks
				this.onopen  = function()     {};
				this.onread  = function(data) {};
				this.onclose = function(code) {};

				this.write = function(data) {
					if (this.readyState != CometSession.READYSTATE_OPEN) throw "InvalidReadystate"
					var self = this;
					var d = "[" + this.packetId + ",\"" + data.replace(/"/g,'\\"').replace(/'/g,"\\'") + "\"]";
					this.packetId++;
					$.getJSON(this.url + "send/?s=" + this.sessionKey + "&d=" + d + "&jsoncallback=?", function(json) {
						// TODO: handle errors / success
					}).error(function() {
						alert("error sending!!");
					});

				};

				this.close = function() {
				};

				// Connects the session to the given url or uses default url
				// * set readyState to opening
				// * make get request on /handshake and pass json data as request param called "d"
				// * expects sessionKey back in response body (session in json object)
				// *** TODO ***
				// Implement timeout and error handling.
				this.connect = function(url) {					
					if (typeof url == "undefined") url = this.url;
					this.readyState = CometSession.READYSTATE_OPENING;
					var self = this;

					$.ajax({
						url: this.url + "handshake/?d=&jsoncallback=?",
						dataType: 'json',
						timeout: this.timeout,
						success: function(sessionKey) {
							self.sessionKey = sessionKey;
							self.readyState = CometSession.READYSTATE_OPEN;					
							self.onopen();
							self.listen();
						}
					});
				};

				this.reestablish = function() {
					var self = this;
					setTimeout(function() { self.listen(); }, self.currReconnTime);
					if (this.currReconnTime < this.maxReconnTime) this.currReconnTime *= 2;
				};

				this.listen = function() {
					var self = this;
					$.getJSON(this.url + "comet/?d=&s=" + self.sessionKey + "&jsoncallback=?", function(json,	status) {
						
						alert("got some data: " + json);

						self.onread(json[1]);
						self.currReconnTime = self.reconnTime;
						if (status == "success") self.listen();
					}).error(function() {
						// the server disconnected us or there was a network 
						// error, try to reestablish the connection
						self.reestablish();
					});
				};			
			}

			// different states the session can be in
			CometSession.prototype.READYSTATE_INITIAL = 0;
			CometSession.prototype.READYSTATE_OPENING = 1;
			CometSession.prototype.READYSTATE_OPEN = 2;
			CometSession.prototype.READYSTATE_CLOSING = 3;
			CometSession.prototype.READYSTATE_CLOSED = 4;

			// TODO: implement packet encoding
			// different packet encodings
			CometSession.prototype.PACKET_ENCODING_TEXT = 0;
			CometSession.prototype.PACKET_ENCODING_BASE64 = 1;

			function send(data) {
				session.write(data);
			}

			var session = new CometSession();

			function init() {
				session.onopen = function() {};
				session.onread = function(data) { alert("onread: " + data) };
				session.onclose = function(code) { alert("closed: " + code); };
				session.connect("/spiffy/chat/");
			}

			google.setOnLoadCallback(function() {
				/* Start the first long poll. */
				/* setTimeout is required to let the browser know
				the page is finished loading. */
				setTimeout(function() { init(); }, 500);
			});
		:css
			#data { margin: .5em; }
			#data .msg { white-space: pre; font-family: courier; font-size: 14px; margin-bottom: .5em; margin-left: .5em; }
	%body
		%form{:method => "post"}
			%input#sdata{:type => "text", :name => "data"}
			%button{:type => "button", :onClick =>"javascript:send($('#sdata').val());"} send!
		%div#data
